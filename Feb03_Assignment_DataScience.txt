# Question 1 Solution 

def keyword
def odd_numbers():
  return [x for x in range(1, 26) if x % 2 != 0]


# Question 2 Solution

We use *args and **kwargs as an argument when we are unsure about the number of arguments to pass in the functions.
def adder(*num):
    sum = 0
    
    for n in num:
        sum = sum + n

    print("Sum:",sum)

adder(3,5)
adder(4,5,6,7)
adder(1,2,3,5,6)


# Question 3 Solution

An iterator is an object that can be iterated upon.
This means that you can traverse through all the values in the object
iter() method
l=[2, 4, 6, 8, 10, 12, 14, 16,18, 20]
print(l[0:5])


# Question 4 Solution

Generator function allows you to declare a function that behaves likes an iterator,
allowing programmers to make an iterator in a fast, easy, and clean way
yield keyword is used to create a generator function


# Question 5 Solution 

def prime_code():
    primes = []
    for num in range(2, 1000):
        for prime in primes:
            if num % prime == 0:
                break
        else:
            primes.append(num)
            yield num

prime_numbers = prime_code()
for i in range(20):
    print(next(prime_numbers))